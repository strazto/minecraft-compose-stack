version: "3"

x-user: &user
  user: "${UID:?must set UID in .env}:${GID:?must set GID in .env}"

services:
  minecraft:
    image: itzg/minecraft-server
    tty: true
    stdin_open: true
    restart: unless-stopped
    ports:
      - "25565:25565"
    environment:
      EULA: "TRUE"
      MEMORY: "10G"
      VIEW_DISTANCE: "32"
      RCON_CMDS_STARTUP: |-
        gamerule keepInventory true
        gamerule lavaSourceConversion true
      TYPE: PURPUR
      # https://www.spigotmc.org/resources/discordsrv.18494/
      SPIGET_RESOURCES: "18494"

      CFG_DISCORDSRV_BOT_TOKEN: "${DISCORDSRV_BOT_TOKEN}"
      CFG_DISCORDSRV_GLOBAL_CHANNEL_ID: "${DISCORDSRV_GLOBAL_CHANNEL_ID}"
      CFG_DISCORDSRV_CONSOLE_CHANNEL_ID: "${DISCORDSRV_CONSOLE_CHANNEL_ID}"
    depends_on:
      restore-backup:
        condition: service_completed_successfully
    volumes:
      # attach the relative directory 'data' to the container's /data path
      - "${docker_data_folder}/minecraft/data:/data"
      - "./plugins:/plugins"
  # # "init" container for mc to restore the data volume when empty
  restore-backup:
    # Same image as mc, but any base image with bash and tar will work
    image: itzg/mc-backup
    <<: *user
    restart: no
    entrypoint: restore-tar-backup
    volumes:
      #  Write access to minecraft data.
      #  Ensure the mount is the same
      - "${docker_data_folder}/minecraft/data:/data"
      # Read Only access to backups
      - "${docker_data_folder}/minecraft/backups:/backups:ro"
  backups:
    image: itzg/mc-backup
    <<: *user
    depends_on:
      minecraft:
        condition: service_healthy
    environment:
      BACKUP_INTERVAL: "2h"
      RCON_HOST: minecraft
      # since this service waits for mc to be healthy, no initial delay is needed
      INITIAL_DELAY: 0

    volumes:
      # Read only access to minecraft data
      - "${docker_data_folder}/minecraft/data:/data:ro"
      # Write access to backups
      - "${docker_data_folder}/minecraft/backups:/backups"